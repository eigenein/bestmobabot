import pickle
from base64 import b85decode
from datetime import datetime, time, timedelta, timezone
from operator import attrgetter
from random import choice, shuffle
from time import sleep
from typing import Any, Callable, Dict, Iterable, List, Optional, Tuple

from bestmobabot import constants
from bestmobabot.api import API, AlreadyError, NotEnoughError, NotFoundError
from bestmobabot.arena import ArenaSolution, ArenaSolver, reduce_grand_arena, reduce_normal_arena
from bestmobabot.database import Database
from bestmobabot.dataclasses_ import (
    ArenaResult,
    Dungeon,
    EndDungeonBattleResponse,
    Hero,
    Mission,
    Quests,
    Replay,
    Reward,
    User,
)
from bestmobabot.enums import BattleType, DungeonUnitType, HeroesJSMode, LibraryTitanElement, TowerFloorType
from bestmobabot.helpers import find_expedition_team, get_teams_unit_ids, get_unit_ids, naive_select_attackers
from bestmobabot.jsapi import execute_battle_with_retry
from bestmobabot.logging_ import log_rewards, logger
from bestmobabot.model import Model
from bestmobabot.resources import get_heroic_mission_ids, mission_name, shop_name
from bestmobabot.scheduler import Scheduler, Task, now
from bestmobabot.settings import Settings
from bestmobabot.telegram import Telegram, TelegramLogger
from bestmobabot.tracking import send_event
from bestmobabot.trainer import Trainer
from bestmobabot.vk import VK


class Bot:
    def __init__(self, db: Database, api: API, vk: VK, telegram: Optional[Telegram], settings: Settings):
        self.db = db
        self.api = api
        self.vk = vk
        self.logger = TelegramLogger(telegram)
        self.settings = settings

        self.user: User = None
        self.scheduler = Scheduler(self)

    # Task engine.
    # ------------------------------------------------------------------------------------------------------------------

    def prepare(self):
        self.user = self.api.get_user_info()

        self.scheduler.add_tasks([
            Task(at=[
                time(hour=0, minute=0, tzinfo=self.user.tz),
                time(hour=4, minute=48, tzinfo=self.user.tz),
                time(hour=9, minute=36, tzinfo=self.user.tz),
                time(hour=14, minute=24, tzinfo=self.user.tz),
                time(hour=19, minute=12, tzinfo=self.user.tz),
            ], execute=self.attack_normal_arena, offset=self.settings.bot.arena.schedule_offset),
            Task(at=[
                time(hour=0, minute=0, tzinfo=self.user.tz),
                time(hour=4, minute=48, tzinfo=self.user.tz),
                time(hour=9, minute=36, tzinfo=self.user.tz),
                time(hour=14, minute=24, tzinfo=self.user.tz),
                time(hour=19, minute=12, tzinfo=self.user.tz),
            ], execute=self.attack_grand_arena, offset=self.settings.bot.arena.schedule_offset),
            Task(at=[
                time(hour=0, minute=0, tzinfo=self.user.tz),
                time(hour=6, minute=0, tzinfo=self.user.tz),
                time(hour=12, minute=0, tzinfo=self.user.tz),
                time(hour=18, minute=0, tzinfo=self.user.tz),
            ], execute=self.farm_mail),
            Task(at=[
                time(hour=0, minute=0, tzinfo=self.user.tz),
                time(hour=6, minute=0, tzinfo=self.user.tz),
                time(hour=12, minute=0, tzinfo=self.user.tz),
                time(hour=18, minute=0, tzinfo=self.user.tz),
            ], execute=self.check_freebie),
            Task(at=[
                time(hour=0, minute=0, tzinfo=self.user.tz),
                time(hour=4, minute=0, tzinfo=self.user.tz),
                time(hour=8, minute=0, tzinfo=self.user.tz),
                time(hour=12, minute=0, tzinfo=self.user.tz),
                time(hour=16, minute=0, tzinfo=self.user.tz),
                time(hour=20, minute=0, tzinfo=self.user.tz),
            ], execute=self.farm_expeditions),
            Task(at=[
                time(hour=0, minute=0, tzinfo=self.user.tz),
                time(hour=12, minute=0, tzinfo=self.user.tz),
            ], execute=self.get_arena_replays),
            Task(at=[
                time(hour=0, minute=0, tzinfo=self.user.tz),
                time(hour=4, minute=0, tzinfo=self.user.tz),
                time(hour=8, minute=0, tzinfo=self.user.tz),
                time(hour=12, minute=0, tzinfo=self.user.tz),
                time(hour=16, minute=0, tzinfo=self.user.tz),
                time(hour=20, minute=0, tzinfo=self.user.tz),
            ], execute=self.raid_missions),
            Task(at=[
                time(hour=9, minute=30, tzinfo=self.user.tz),
                time(hour=14, minute=30, tzinfo=self.user.tz),
                time(hour=21, minute=30, tzinfo=self.user.tz),
            ], execute=self.farm_quests),

            Task(at=[time(hour=6, minute=0, tzinfo=self.user.tz)], execute=self.skip_tower),
            Task(at=[time(hour=8, minute=0, tzinfo=self.user.tz)], execute=self.register),
            Task(at=[time(hour=8, minute=15, tzinfo=self.user.tz)], execute=self.farm_daily_bonus),
            Task(at=[time(hour=8, minute=20, tzinfo=timezone.utc)], execute=self.raid_bosses),
            Task(at=[time(hour=8, minute=30, tzinfo=self.user.tz)], execute=self.buy_chest),
            Task(at=[time(hour=8, minute=45, tzinfo=self.user.tz)], execute=self.level_up_titan_hero_gift),
            Task(at=[time(hour=9, minute=0, tzinfo=self.user.tz)], execute=self.send_daily_gift),
            Task(at=[time(hour=9, minute=15, tzinfo=self.user.tz)], execute=self.open_titan_artifact_chest),
            Task(at=[time(hour=9, minute=30, tzinfo=self.user.tz)], execute=self.farm_offers),
            Task(at=[time(hour=10, minute=0, tzinfo=self.user.tz)], execute=self.farm_zeppelin_gift),
            Task(at=[time(hour=10, minute=15, tzinfo=self.user.tz)], execute=self.clear_dungeon),
        ])
        if self.settings.bot.shops:
            self.scheduler.add_task(Task(at=[
                # First shopping time should be later than usual event start time (2:00 UTC).
                # Every 8 hours afterwards.
                time(hour=2, minute=15, tzinfo=timezone.utc),
                time(hour=10, minute=15, tzinfo=timezone.utc),
                time(hour=18, minute=15, tzinfo=timezone.utc),
            ], execute=self.shop))
        if self.settings.bot.is_trainer:
            self.scheduler.add_task(Task(at=[time(hour=22, minute=0)], execute=self.train_arena_model))
        if self.settings.bot.arena.randomize_grand_defenders:
            self.scheduler.add_task(Task(at=[time(hour=10, minute=30)], execute=self.randomize_grand_defenders))
        if self.settings.bot.enchant_rune:
            self.scheduler.add_task(Task(at=[time(hour=9, minute=0)], execute=self.enchant_rune))
        if self.settings.bot.debug:
            logger.warning('Running in debug mode.')
            self.scheduler.add_task(Task(at=[(datetime.now() + timedelta(seconds=15)).time()], execute=self.quack))

        send_event(category='bot', action='start', user_id=self.api.user_id)

    def run(self):
        self.scheduler.run()

    # Helpers.
    # ------------------------------------------------------------------------------------------------------------------

    def log(self, text: str):
        with self.logger:
            self.logger.append(text)

    def get_raid_mission_ids(self) -> Iterable[str]:
        missions: Dict[str, Mission] = {
            mission.id: mission
            for mission in self.api.get_all_missions()
            if mission.is_raid_available and mission_name(mission.id).lower() in self.settings.bot.raid_missions
        }

        # Get heroic mission IDs.
        heroic_mission_ids = get_heroic_mission_ids()

        # First, yield heroic missions.
        raided_heroic_mission_ids = list(missions.keys() & heroic_mission_ids)
        shuffle(raided_heroic_mission_ids)  # shuffle in order to distribute stamina evenly
        logger.info(f'Raided heroic missions: {raided_heroic_mission_ids}.')
        for mission_id in raided_heroic_mission_ids:
            tries_left = constants.RAID_N_HEROIC_TRIES - missions[mission_id].tries_spent
            logger.info(f'Mission #{mission_id}: {tries_left} tries left.')
            for _ in range(tries_left):
                yield mission_id

        # Then, randomly choose non-heroic missions infinitely.
        non_heroic_mission_ids = list(missions.keys() - heroic_mission_ids)
        logger.info(f'Raided non-heroic missions: {non_heroic_mission_ids}.')
        if not non_heroic_mission_ids:
            logger.info('No raided non-heroic missions.')
            return
        while True:
            yield choice(non_heroic_mission_ids)

    # Tasks.
    # ------------------------------------------------------------------------------------------------------------------

    def quack(self):
        """
        –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞.
        """
        logger.info('About to quack‚Ä¶')
        self.log(f'üê§ *{self.user.name}* —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –∫—Ä—è–∫–∞—Ç—å‚Ä¶')
        sleep(5)
        logger.info('Quack!')
        self.log(f'üê§ –ë–æ—Ç *{self.user.name}* —Å–∫–∞–∑–∞–ª: ¬´–ö—Ä—è!¬ª')
        return now() + timedelta(seconds=15)

    def register(self):
        """
        –ó–∞–Ω–æ–≤–æ –∑–∞—Ö–æ–¥–∏—Ç –≤ –∏–≥—Ä—É, —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ —Å–æ–±—ã—Ç–∏—è—Ö.
        """
        logger.info('Registering‚Ä¶')
        self.log(f'üé´ *{self.user.name}* –∑–∞–Ω–æ–≤–æ –∑–∞—Ö–æ–¥–∏—Ç –≤ –∏–≥—Ä—É‚Ä¶')
        self.api.prepare(invalidate_session=True)
        self.api.register()
        self.user = self.api.get_user_info()
        self.log(f'üé´ *{self.user.name}* –∑–∞–Ω–æ–≤–æ –∑–∞—à–µ–ª –≤ –∏–≥—Ä—É.')

    def farm_daily_bonus(self):
        """
        –ó–∞–±–∏—Ä–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫.
        """
        logger.info('Farming daily bonus‚Ä¶')
        self.log(f'*{self.user.name}* –∑–∞–±–∏—Ä–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫‚Ä¶')
        with self.logger:
            self.logger.append(f'üéÅ *{self.user.name}* –ø–æ–ª—É—á–∏–ª –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –ø–æ–¥–∞—Ä–∫–µ:', '')
            self.api.farm_daily_bonus().log(self.logger)

    def farm_expeditions(self) -> Optional[datetime]:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É —Å —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π –≤ –¥–∏—Ä–∏–∂–∞–±–ª–µ.
        """
        now_ = now()

        logger.info('Farming expeditions‚Ä¶')
        self.log(f'‚õ∫Ô∏è *{self.user.name}* –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏‚Ä¶')
        expeditions = self.api.list_expeditions()
        for i, expedition in enumerate(expeditions, 1):
            if expedition.is_started and expedition.end_time < now_:
                with self.logger:
                    self.logger.append(f'‚õ∫Ô∏è *{self.user.name}* –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É —Å —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏:', '')
                    self.api.farm_expedition(expedition.id).log(self.logger)

        self.log(f'‚õ∫Ô∏è *{self.user.name}* –ø—Ä–æ–≤–µ—Ä–∏–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏.')
        return self.send_expeditions()  # send expeditions once finished

    def send_expeditions(self) -> Optional[datetime]:
        logger.info('Sending expeditions‚Ä¶')
        self.log(f'‚õ∫Ô∏è *{self.user.name}* –ø—Ä–æ–±—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏‚Ä¶')

        # Need to know which expeditions are already started.
        expeditions = self.api.list_expeditions()
        started_expeditions = [expedition for expedition in expeditions if expedition.is_started]
        logger.info('{} expeditions in progress.', len(started_expeditions))
        next_run_at = min([expedition.end_time for expedition in started_expeditions], default=None)
        if next_run_at:
            logger.info('The earliest expedition finishes at {}.', next_run_at.astimezone(self.user.tz))

        # Select available heroes.
        busy_ids = {hero_id for expedition in started_expeditions for hero_id in expedition.hero_ids}
        logger.info('Busy heroes: {}.', busy_ids)
        heroes: Dict[str, Hero] = {hero.id: hero for hero in self.api.get_all_heroes() if hero.id not in busy_ids}
        logger.info('{} heroes are still available.', len(heroes))

        # Let's see which expeditions are available.
        available_expeditions = [expedition for expedition in expeditions if expedition.is_available]
        logger.info('{} expeditions are still available.', len(available_expeditions))

        while available_expeditions:
            # Choose the least powerful expedition.
            expedition, *available_expeditions = sorted(available_expeditions, key=attrgetter('power'))
            logger.info('The optimal expedition power is {}.', expedition.power)

            # Choose the least powerful appropriate team.
            team = find_expedition_team(heroes.values(), expedition.power)
            if team is None:
                logger.info('Could not find powerful enough team.')
                break

            # Send the expedition.
            end_time, quests = self.api.send_expedition_heroes(expedition.id, get_unit_ids(team))
            self.log(f'‚õ∫Ô∏è *{self.user.name}* –æ—Ç–ø—Ä–∞–≤–∏–ª —ç–∫—Å–ø–µ–¥–∏—Ü–∏—é #{expedition.id}.')
            self.farm_quests(quests)

            # Exclude the busy heroes.
            for hero in team:
                del heroes[hero.id]

            # We should farm the earliest finished expedition.
            if next_run_at is None or end_time < next_run_at:
                next_run_at = end_time

        self.log(f'‚õ∫Ô∏è *{self.user.name}* –∑–∞–∫–æ–Ω—á–∏–ª —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π.')
        return next_run_at

    def farm_quests(self, quests: Quests = None):
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∏–∑ –∑–∞–¥–∞–Ω–∏–π.
        """
        logger.info('Farming quests‚Ä¶')
        self.log(f'‚úÖ *{self.user.name}* –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏‚Ä¶')
        if quests is None:
            quests = self.api.get_all_quests()
        for quest in quests:
            if not quest.is_reward_available:
                continue
            if self.settings.bot.no_experience and quest.reward.experience:
                logger.warning(f'Ignoring {quest.reward.experience} experience reward for quest #{quest.id}.')
                continue
            with self.logger:
                self.logger.append(f'‚úÖ *{self.user.name}* –ø–æ–ª—É—á–∞–µ—Ç –∑–∞ –∑–∞–¥–∞—á—É:', '')
                self.api.farm_quest(quest.id).log(self.logger)
        self.log(f'‚úÖ *{self.user.name}* –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á–∏.')

    def farm_mail(self):
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∏–∑ –ø–æ—á—Ç—ã.
        """
        logger.info('Farming mail‚Ä¶')
        self.log(f'üì© *{self.user.name}* —á–∏—Ç–∞–µ—Ç –ø–æ—á—Ç—É‚Ä¶')
        letters = self.api.get_all_mail()
        if letters:
            logger.info(f'{len(letters)} letters.')
            log_rewards(self.api.farm_mail(letter.id for letter in letters).values())
        self.log(f'üì© *{self.user.name}* –ø—Ä–æ—á–∏—Ç–∞–ª –ø–æ—á—Ç—É.')

    def buy_chest(self):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å—É–Ω–¥—É–∫.
        """
        logger.info('Buying a chest‚Ä¶')
        self.log(f'üéÅ *{self.user.name}* –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—É–Ω–¥—É–∫‚Ä¶')
        log_rewards(self.api.buy_chest())
        self.log(f'üéÅ *{self.user.name}* –æ—Ç–∫—Ä—ã–ª —Å—É–Ω–¥—É–∫.')

    def send_daily_gift(self):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Ä–¥–µ—á–∫–∏ –¥—Ä—É–∑—å—è–º.
        """
        logger.info('Sending daily gift‚Ä¶')
        self.log(f'‚ù§Ô∏è *{self.user.name}* –¥–∞—Ä–∏—Ç —Å–µ—Ä–¥–µ—á–∫–∏ –¥—Ä—É–∑—å—è–º‚Ä¶')
        if self.settings.bot.friend_ids:
            self.farm_quests(self.api.send_daily_gift(self.settings.bot.friend_ids))
        else:
            logger.warning('No friends specified.')
        self.log(f'‚ù§Ô∏è *{self.user.name}* –ø–æ–¥–∞—Ä–∏–ª —Å–µ—Ä–¥–µ—á–∫–∏ –¥—Ä—É–∑—å—è–º.')

    def train_arena_model(self):
        """
        –¢—Ä–µ–Ω–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –∞—Ä–µ–Ω—ã.
        """
        logger.info('Running trainer‚Ä¶')
        self.log(f'üé≤Ô∏è *{self.user.name}* —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å‚Ä¶')
        Trainer(
            self.db,
            n_splits=constants.MODEL_N_SPLITS,
            n_last_battles=self.settings.bot.arena.last_battles,
        ).train()
        self.log(f'üé≤Ô∏è *{self.user.name}* –Ω–∞—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª –º–æ–¥–µ–ª—å.')

    def attack_any_arena(
        self,
        *,
        n_heroes: int,
        make_solver: Callable[[Model, List[Hero]], ArenaSolver],
        attack: Callable[[ArenaSolution], Tuple[ArenaResult, Quests]],
        finalise: Callable[[], Any],
    ):
        logger.info('Attacking arena‚Ä¶')
        self.log(f'‚öîÔ∏è *{self.user.name}* –∏–¥–µ—Ç –Ω–∞ –∞—Ä–µ–Ω—É‚Ä¶')

        # Load arena model.
        logger.info('Loading model‚Ä¶')
        try:
            model: Model = pickle.loads(b85decode(self.db['bot:model']))
        except KeyError:
            logger.warning('Model is not ready yet.')
            return
        logger.trace('Model: {}.', model)

        # Get all heroes.
        heroes = self.api.get_all_heroes()
        if len(heroes) < n_heroes:
            logger.warning('Not enough heroes: {} needed, you have {}.', n_heroes, len(heroes))
            return

        # Refresh clan ID.
        self.user = self.api.get_user_info()

        # Pick an enemy and select attackers.
        solution = make_solver(model, heroes).solve()
        solution.log()

        # Retry if win probability is too low.
        if solution.probability < constants.ARENA_MIN_PROBABILITY:
            logger.warning('Win probability is too low.')
            return now() + constants.ARENA_RETRY_INTERVAL

        # Attack!
        result, quests = attack(solution)

        # Collect results.
        result.log()  # TODO: loggable.
        finalise()
        self.farm_quests(quests)

        self.log(f'‚öîÔ∏è *{self.user.name}* –∑–∞–∫–æ–Ω—á–∏–ª –∞—Ä–µ–Ω—É.')  # TODO: remove.

    def attack_normal_arena(self):
        """
        –°–æ–≤–µ—Ä—à–∞–µ—Ç –±–æ–π –Ω–∞ –æ–±—ã—á–Ω–æ–π –∞—Ä–µ–Ω–µ.
        """
        self.attack_any_arena(
            n_heroes=constants.TEAM_SIZE,
            make_solver=lambda model, heroes: ArenaSolver(
                db=self.db,
                model=model,
                user_clan_id=self.user.clan_id,
                heroes=heroes,
                n_required_teams=1,
                max_iterations=self.settings.bot.arena.normal_max_pages,
                n_keep_solutions=self.settings.bot.arena.normal_keep_solutions,
                n_generate_solutions=self.settings.bot.arena.normal_generate_solutions,
                n_generations_count_down=self.settings.bot.arena.normal_generations_count_down,
                early_stop=self.settings.bot.arena.early_stop,
                get_enemies=self.api.find_arena_enemies,
                friendly_clans=self.settings.bot.arena.friendly_clans,
                reduce_probabilities=reduce_normal_arena,
                callback=lambda i: self.log(f'‚öîÔ∏è *{self.user.name}* –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ *{i}* –æ–±—ã—á–Ω–æ–π –∞—Ä–µ–Ω—ã‚Ä¶'),
            ),
            attack=lambda solution: self.api.attack_arena(solution.enemy.user_id, get_unit_ids(solution.attackers[0])),
            finalise=lambda: None,
        )

    def attack_grand_arena(self):
        """
        –°–æ–≤–µ—Ä—à–∞–µ—Ç –±–æ–π –Ω–∞ –≥—Ä–∞–Ω–¥ –∞—Ä–µ–Ω–µ.
        """

        self.attack_any_arena(
            n_heroes=constants.N_GRAND_HEROES,
            make_solver=lambda model, heroes: ArenaSolver(
                db=self.db,
                model=model,
                user_clan_id=self.user.clan_id,
                heroes=heroes,
                n_required_teams=constants.N_GRAND_TEAMS,
                max_iterations=self.settings.bot.arena.grand_max_pages,
                n_keep_solutions=self.settings.bot.arena.grand_keep_solutions,
                n_generate_solutions=self.settings.bot.arena.grand_generate_solutions,
                n_generations_count_down=self.settings.bot.arena.grand_generations_count_down,
                early_stop=self.settings.bot.arena.early_stop,
                get_enemies=self.api.find_grand_enemies,
                friendly_clans=self.settings.bot.arena.friendly_clans,
                reduce_probabilities=reduce_grand_arena,
                callback=lambda i: self.log(f'‚öîÔ∏è *{self.user.name}* –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ *{i}* –≥—Ä–∞–Ω–¥-–∞—Ä–µ–Ω—ã‚Ä¶'),
            ),
            attack=lambda solution: self.api.attack_grand(
                solution.enemy.user_id, get_teams_unit_ids(solution.attackers)),
            finalise=lambda: self.api.farm_grand_coins().log(),
        )

    def get_arena_replays(self):
        """
        –ß–∏—Ç–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∂—É—Ä–Ω–∞–ª—ã –∞—Ä–µ–Ω.
        """
        logger.info('Reading arena logs‚Ä¶')
        self.log(f'üìíÔ∏è *{self.user.name}* —á–∏—Ç–∞–µ—Ç –∂—É—Ä–Ω–∞–ª –∞—Ä–µ–Ω—ã‚Ä¶')

        replays: List[Replay] = [
            *self.api.get_battle_by_type(BattleType.ARENA),
            *self.api.get_battle_by_type(BattleType.GRAND),
        ]
        for replay in replays:
            if f'replays:{replay.id}' in self.db:
                continue
            self.db[f'replays:{replay.id}'] = {
                'start_time': replay.start_time.timestamp(),
                'win': replay.result.win,
                'attackers': [hero.dict() for hero in replay.attackers.values()],
                'defenders': [hero.dict() for defenders in replay.defenders for hero in defenders.values()],
            }
            logger.info(f'Saved #{replay.id}.')

        self.log(f'üìíÔ∏è *{self.user.name}* –ø—Ä–æ—á–∏—Ç–∞–ª –∂—É—Ä–Ω–∞–ª –∞—Ä–µ–Ω—ã.')

    def check_freebie(self):
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
        """
        logger.info('Checking freebie‚Ä¶')
        self.log(f'üéÅ *{self.user.name}* –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞ VK.com‚Ä¶')
        should_farm_mail = False

        for gift_id in self.vk.find_gifts():
            if f'gifts:{self.api.user_id}:{gift_id}' in self.db:
                continue
            logger.info(f'Checking {gift_id}‚Ä¶')
            reward = self.api.check_freebie(gift_id)
            if reward is not None:
                reward.log()
                should_farm_mail = True
            self.db[f'gifts:{self.api.user_id}:{gift_id}'] = True

        self.log(f'üéÅ *{self.user.name}* –ø—Ä–æ–≤–µ—Ä–∏–ª –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞ VK.com.')

        if should_farm_mail:
            self.farm_mail()

    def farm_zeppelin_gift(self):
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –∫–ª—é—á —É –≤–∞–ª—å–∫–∏—Ä–∏–∏ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–Ω—ã–µ —Å—É–Ω–¥—É–∫–∏.
        """
        logger.info('Farming zeppelin gift‚Ä¶')
        self.log(f'üîë *{self.user.name}* –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–Ω—ã–µ —Å—É–Ω–¥—É–∫–∏‚Ä¶')

        self.api.farm_zeppelin_gift().log()
        for _ in range(constants.MAX_OPEN_ARTIFACT_CHESTS):
            try:
                rewards = self.api.open_artifact_chest()
            except NotEnoughError:
                logger.info('All keys are spent.')
                break
            else:
                log_rewards(rewards)
        else:
            logger.warning('Maximum number of chests opened.')

        self.log(f'üîë *{self.user.name}* –æ—Ç–∫—Ä—ã–ª –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–Ω—ã–µ —Å—É–Ω–¥—É–∫–∏‚Ä¶')

    def raid_missions(self):
        """
        –•–æ–¥–∏—Ç –≤ —Ä–µ–π–¥—ã –≤ –º–∏—Å—Å–∏—è—Ö –≤ –∫–∞–º–ø–∞–Ω–∏–∏ –∑–∞ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏.
        """
        logger.info(f'Raid missions‚Ä¶')
        self.log(f'üî• *{self.user.name}* –∏–¥–µ—Ç –≤ —Ä–µ–π–¥—ã‚Ä¶')

        for mission_id in self.get_raid_mission_ids():
            logger.info(f'Raid mission #{mission_id} ¬´{mission_name(mission_id)}¬ª‚Ä¶')
            try:
                log_rewards(self.api.raid_mission(mission_id))
            except NotEnoughError as e:
                logger.info(f'Not enough: {e.description}.')
                break

        self.log(f'üî• *{self.user.name}* —Å—Ö–æ–¥–∏–ª –≤ —Ä–µ–π–¥—ã.')

    def shop(self):
        """
        –ü–æ–∫—É–ø–∞–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ –≤–µ—â–∏.
        """
        self.log(f'üõç *{self.user.name}* –∏–¥–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω‚Ä¶')

        logger.info(f'Requesting shops‚Ä¶')
        slots: List[Tuple[str, str]] = [
            (shop_id, slot.id)
            for shop_id in constants.SHOP_IDS
            for slot in self.api.get_shop(shop_id)
            if (not slot.is_bought) and (not slot.cost.star_money) and (slot.reward.keywords & self.settings.bot.shops)
        ]

        logger.info(f'Going to buy {len(slots)} slots.')
        for shop_id, slot_id in slots:
            logger.info(f'Buying slot #{slot_id} in shop ¬´{shop_name(shop_id)}¬ª‚Ä¶')
            try:
                self.api.shop(shop_id=shop_id, slot_id=slot_id).log()
            except NotEnoughError as e:
                logger.warning(f'Not enough: {e.description}')
            except AlreadyError as e:
                logger.warning(f'Already: {e.description}')

        self.log(f'üõç *{self.user.name}* —Å—Ö–æ–¥–∏–ª –≤ –º–∞–≥–∞–∑–∏–Ω.')

    def skip_tower(self):
        """
        –ó–∞—á–∏—Å—Ç–∫–∞ –±–∞—à–Ω–∏.
        """
        logger.info('Skipping the tower‚Ä¶')
        self.log(f'üóº *{self.user.name}* –ø—Ä–æ—Ö–æ–¥–∏—Ç –±–∞—à–Ω—é‚Ä¶')

        tower = self.api.get_tower_info()
        heroes: List[str] = []

        # Yeah, it's a bit complicated‚Ä¶
        while tower.floor_number <= 50:
            logger.info(f'Floor #{tower.floor_number}: {tower.floor_type}.')
            self.log(f'üóº *{self.user.name}* –Ω–∞ {tower.floor_number}-–º —ç—Ç–∞–∂–µ –±–∞—à–Ω–∏‚Ä¶')

            if tower.floor_type == TowerFloorType.BATTLE:
                # If we have the top level, then we can skip the tower entirely.
                # But we need to go chest by chest. So go to the next chest.
                if tower.may_full_skip:
                    tower = self.api.next_tower_chest()
                # Maybe we can skip the floor, because of the yesterday progress.
                elif tower.floor_number <= tower.may_skip_floor:
                    tower, reward = self.api.skip_tower_floor()
                    reward.log()
                # Otherwise, we have to simulate the battle.
                else:
                    # Fetch the most powerful team, unless already done.
                    heroes = heroes or get_unit_ids(naive_select_attackers(self.api.get_all_heroes()))
                    reward: Optional[Reward] = execute_battle_with_retry(
                        mode=HeroesJSMode.TOWER,
                        start_battle=lambda: self.api.start_tower_battle(heroes),
                        end_battle=lambda response: self.api.end_tower_battle(response).log(),
                    )
                    if reward:
                        reward.log()
                        tower = self.api.next_tower_floor()
                    else:
                        # No attempt was successful, stop the tower.
                        logger.warning('Tower is stopped prematurely.')
                        break
            elif tower.floor_type == TowerFloorType.CHEST:
                # The simplest one. Just open a random chest.
                reward, _ = self.api.open_tower_chest(choice([0, 1, 2]))
                with self.logger:
                    self.logger.append(f'üóº *{self.user.name}* –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ {tower.floor_number}-–º —ç—Ç–∞–∂–µ:', '')
                    reward.log(self.logger)
                # If it was the top floor, we have to stop.
                if tower.floor_number == 50:
                    logger.success('Finished. It was the top floor.')
                    break
                # If we can skip the tower entirely, then go to the next chest.
                if tower.may_full_skip:
                    tower = self.api.next_tower_chest()
                # Otherwise, just proceed to the next floor.
                else:
                    tower = self.api.next_tower_floor()
            elif tower.floor_type == TowerFloorType.BUFF:
                # Buffs go from the cheapest to the most expensive.
                # So try to buy the most expensive ones first.
                for buff in reversed(tower.floor):
                    buff_id = int(buff['id'])
                    # Some buffs require to choose a hero. We ignore these.
                    if buff_id not in constants.TOWER_IGNORED_BUFF_IDS:
                        try:
                            self.api.buy_tower_buff(buff_id)
                        except NotEnoughError:
                            logger.info(f'Not enough resources for buff #{buff_id}.')
                        except AlreadyError:
                            logger.info(f'Already bought buff #{buff_id}.')
                        except NotFoundError as e:
                            logger.warning(f'Not found for buff #{buff_id}: {e.description}.')
                    else:
                        logger.debug(f'Skip buff #{buff_id}.')
                # Then normally proceed to the next floor.
                tower = self.api.next_tower_floor()

        self.log(f'üóº *{self.user.name}* –∑–∞–∫–æ–Ω—á–∏–ª –±–∞—à–Ω—é –Ω–∞ *{tower.floor_number}-–º* —ç—Ç–∞–∂–µ.')

    def farm_offers(self):
        """
        –§–∞—Ä–º–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–∫–∞–º–Ω–∏ –æ–±–ª–∏–∫–æ–≤).
        """
        self.log(f'üîµ *{self.user.name}* —Ñ–∞—Ä–º–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è‚Ä¶')

        logger.info('Farming offers‚Ä¶')
        for offer in self.api.get_all_offers():
            logger.debug(f'#{offer.id}: {offer.offer_type}.')
            if offer.offer_type in constants.OFFER_FARMED_TYPES and not offer.is_free_reward_obtained:
                with self.logger:
                    self.logger.append(f'üîµ *{self.user.name}* –ø–æ–ª—É—á–∞–µ—Ç –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:', '')
                    self.api.farm_offer_reward(offer.id).log(self.logger)

        self.log(f'üîµ *{self.user.name}* –∑–∞–∫–æ–Ω—á–∏–ª —Ñ–∞—Ä–º–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.')

    def raid_bosses(self):
        """
        –†–µ–π–¥–∏—Ç –±–æ—Å—Å–æ–≤ –ó–∞–ø—Ä–µ–¥–µ–ª—å—è.
        """
        logger.info('Raid bosses‚Ä¶')
        self.log(f'üî¥ *{self.user.name}* —Ä–µ–π–¥–∏—Ç –±–æ—Å—Å–æ–≤ –ó–∞–ø—Ä–µ–¥–µ–ª—å—è‚Ä¶')

        for i, boss in enumerate(self.api.get_all_bosses(), 1):
            self.log(f'üî¥ *{self.user.name}* —Ä–µ–π–¥–∏—Ç –±–æ—Å—Å–æ–≤ –ó–∞–ø—Ä–µ–¥–µ–ª—å—è: {i}-–π‚Ä¶')
            if boss.may_raid:
                logger.info(f'Raid boss #{boss.id}‚Ä¶')
                self.api.raid_boss(boss.id).log()
                rewards, quests = self.api.open_boss_chest(boss.id)
                log_rewards(rewards)
                self.farm_quests(quests)
            else:
                logger.info(f'May not raid boss #{boss.id}.')

        self.log(f'üî¥ *{self.user.name}* –∑–∞–∫–æ–Ω—á–∏–ª —Ä–µ–π–¥ –±–æ—Å—Å–æ–≤ –ó–∞–ø—Ä–µ–¥–µ–ª—å—è.')

    def open_titan_artifact_chest(self):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ñ–µ—Ä—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Ç–∏—Ç–∞–Ω–æ–≤.
        """
        logger.info('Opening titan artifact chests‚Ä¶')
        self.log(f'‚ö´Ô∏è *{self.user.name}* –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ñ–µ—Ä—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Ç–∏—Ç–∞–Ω–æ–≤‚Ä¶')

        for amount in [10, 1]:
            try:
                rewards, quests = self.api.open_titan_artifact_chest(amount)
            except NotEnoughError:
                logger.info(f'Not enough resources to open {amount} chests.')
            else:
                log_rewards(rewards)
                self.farm_quests(quests)
                break

        self.log(f'‚ö´Ô∏è *{self.user.name}* –æ—Ç–∫—Ä—ã–ª —Å—Ñ–µ—Ä—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Ç–∏—Ç–∞–Ω–æ–≤.')

    def randomize_grand_defenders(self):
        """
        –í—ã—Å—Ç–∞–≤–ª—è–µ—Ç –≤ –∑–∞—â–∏—Ç—É –≥—Ä–∞–Ω–¥-–∞—Ä–µ–Ω—ã —Ç–æ–ø-15 –≥–µ—Ä–æ–µ–≤ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
        """
        logger.info('Randomizing grand defenders‚Ä¶')
        self.log(f'üé≤Ô∏è *{self.user.name}* –∏–∑–º–µ–Ω—è–µ—Ç –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤ –∞—Ä–µ–Ω—ã‚Ä¶')

        heroes = naive_select_attackers(self.api.get_all_heroes(), count=constants.N_GRAND_HEROES)
        if len(heroes) < constants.N_GRAND_HEROES:
            return
        hero_ids = get_unit_ids(heroes)
        shuffle(hero_ids)
        self.api.set_grand_heroes([hero_ids[0:5], hero_ids[5:10], hero_ids[10:15]])

        self.log(f'üé≤Ô∏è *{self.user.name}* –∏–∑–º–µ–Ω–∏–ª –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤ –∞—Ä–µ–Ω—ã.')

    def enchant_rune(self):
        """
        –ó–∞—á–∞—Ä–æ–≤–∞—Ç—å —Ä—É–Ω—É.
        """
        logger.info('Enchant rune‚Ä¶')
        self.log(f'üïâ *{self.user.name}* –∑–∞—á–∞—Ä–æ–≤—ã–≤–∞–µ—Ç —Ä—É–Ω—É‚Ä¶')

        result = self.api.enchant_hero_rune(
            self.settings.bot.enchant_rune.hero_id,
            self.settings.bot.enchant_rune.tier,
        )
        logger.success('Response: {}.', result.response)
        self.log(f'üïâ *{self.user.name}* –∑–∞—á–∞—Ä–æ–≤–∞–ª —Ä—É–Ω—É.')

        self.farm_quests(result.quests)

    def level_up_titan_hero_gift(self):
        """
        –í–ª–æ–∂–∏—Ç—å –∏ —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫—Ä—ã —Å–∞–º–æ–º—É —Å–ª–∞–±–æ–º—É –≥–µ—Ä–æ—é.
        """
        logger.info('Level up and drop titan hero gift‚Ä¶')
        self.log(f'‚ö°Ô∏è *{self.user.name}* –≤–∫–ª–∞–¥—ã–≤–∞–µ—Ç –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫—Ä—ã –º–æ—â–∏‚Ä¶')

        hero = min(self.api.get_all_heroes(), key=attrgetter('power'))
        logger.info('Hero: {}.', hero)
        self.farm_quests(self.api.level_up_titan_hero_gift(hero.id))
        reward, quests = self.api.drop_titan_hero_gift(hero.id)
        reward.log()
        self.farm_quests(quests)

        self.log(f'‚ö°Ô∏è *{self.user.name}* –≤–ª–æ–∂–∏–ª –∏ —Å–±—Ä–æ—Å–∏–ª –∏—Å–∫—Ä—ã –º–æ—â–∏.')

    def clear_dungeon(self):
        """
        –ü–æ–¥–∑–µ–º–µ–ª—å–µ.
        """
        self.log(f'üöáÔ∏è *{self.user.name}* –∏–¥–µ—Ç –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ‚Ä¶')

        dungeon: Optional[Dungeon] = self.api.get_dungeon_info()

        # Prepare attacker lists.
        hero_ids = get_unit_ids(naive_select_attackers(self.api.get_all_heroes()))
        titans = self.api.get_all_titans()
        neutral_titan_ids = get_unit_ids(naive_select_attackers(titans))
        element_titan_ids = {
            element: get_unit_ids(naive_select_attackers(titan for titan in titans if titan.element == element))
            for element in LibraryTitanElement.__members__.values()
        }

        # Clean the dungeon until the first save point.
        while dungeon is not None and not dungeon.floor.should_save_progress:
            logger.info('Floor: {}.', dungeon.floor_number)
            self.log(f'üöáÔ∏è *{self.user.name}* –Ω–∞ *{dungeon.floor_number}-–º* —ç—Ç–∞–∂–µ –ø–æ–¥–∑–µ–º–µ–ª—å—è‚Ä¶')
            team_number, user_data = min(enumerate(dungeon.floor.user_data), key=lambda item: item[1].power)
            if user_data.attacker_type == DungeonUnitType.HERO:
                attacker_ids = hero_ids
                mode = HeroesJSMode.TOWER
            elif user_data.attacker_type == DungeonUnitType.NEUTRAL:
                attacker_ids = neutral_titan_ids
                mode = HeroesJSMode.TITAN
            else:
                attacker_ids = element_titan_ids[constants.TITAN_ELEMENTS[user_data.attacker_type]]
                mode = HeroesJSMode.TITAN
            response: Optional[EndDungeonBattleResponse] = execute_battle_with_retry(
                mode=mode,
                start_battle=lambda: self.api.start_dungeon_battle(attacker_ids, team_number),
                end_battle=lambda response_: self.api.end_dungeon_battle(response_)
            )
            if response:
                with self.logger:
                    self.logger.append(f'üöáÔ∏è *{self.user.name}* –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ *{dungeon.floor_number}-–º* —ç—Ç–∞–∂–µ:', '')
                    response.reward.log(self.logger)
                dungeon = response.dungeon
            else:
                logger.warning('Dungeon is stopped prematurely.')
                break

        # Save progress.
        if not dungeon or dungeon.floor.should_save_progress:
            self.log(f'üöáÔ∏è *{self.user.name}* —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ‚Ä¶')
            with self.logger:
                self.logger.append(f'üöáÔ∏è *{self.user.name}* –ø–æ–ª—É—á–∞–µ—Ç –∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:', '')
                self.api.save_dungeon_progress().reward.log(self.logger)
        else:
            logger.warning('Could not save the dungeon progress.')

        self.log(f'üöáÔ∏è *{self.user.name}* —Å—Ö–æ–¥–∏–ª –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ.')
        self.farm_quests()
