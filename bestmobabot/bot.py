"""
The bot logic.
"""

import contextlib
import json
import os
from datetime import datetime, timedelta, timezone, tzinfo
from operator import attrgetter, itemgetter
from random import choice
from time import sleep
from typing import Callable, Iterable, List, NamedTuple, Optional, Set, TextIO, Tuple

from tinydb import TinyDB, where

from bestmobabot import arena
from bestmobabot.api import AlreadyError, API, InvalidResponseError, NotEnoughError, NotFoundError
from bestmobabot.logger import log_arena_result, log_heroes, log_reward, log_rewards, logger
from bestmobabot.resources import mission_name, shop_name
from bestmobabot.responses import *
from bestmobabot.types import *
from bestmobabot.vk import VK

NextRunAtCallable = Callable[[datetime], datetime]


class Task(NamedTuple):
    next_run_at: NextRunAtCallable
    execute: Callable[..., Optional[datetime]]
    args: Tuple = ()

    def __str__(self):
        return f'{self.execute.__name__}{self.args}'

    @staticmethod
    def at(*, hour: int, minute: int, tz: Optional[tzinfo] = timezone.utc) -> NextRunAtCallable:
        def next_run_at(since: datetime) -> datetime:
            since = since.astimezone(tz)
            upcoming = since.replace(hour=hour, minute=minute, second=0, microsecond=0)
            return upcoming if upcoming > since else upcoming + timedelta(days=1)
        return next_run_at

    @staticmethod
    def every_n_seconds(seconds: float, *, offset: timedelta = timedelta()) -> NextRunAtCallable:
        def next_run_at(since: datetime) -> datetime:
            return since + timedelta(seconds=(seconds - (since.timestamp() - offset.total_seconds()) % seconds))
        return next_run_at

    @staticmethod
    def every_n_minutes(minutes: float, *, offset: timedelta = timedelta()) -> NextRunAtCallable:
        return Task.every_n_seconds(minutes * 60.0, offset=offset)

    @staticmethod
    def every_n_hours(hours: float, *, offset: timedelta = timedelta()) -> NextRunAtCallable:
        return Task.every_n_minutes(hours * 60.0, offset=offset)


class Bot(contextlib.AbstractContextManager):
    MAX_OPEN_ARTIFACT_CHESTS = 5
    MAX_ARENA_ENEMIES = 10  # FIXME: make configurable
    MAX_GRAND_ARENA_ENEMIES = 10  # FIXME: make configurable
    IGNORED_BUFF_IDS = {13, 14, 17, 18, 19}  # These buffs require a hero ID.

    def __init__(
        self,
        db: TinyDB,
        api: API,
        no_experience: bool,
        raids: List[Tuple[str, int]],
        shops: List[Tuple[str, str]],
        battle_log: Optional[TextIO],
    ):
        self.db = db
        self.api = api
        self.no_experience = no_experience
        self.raids = raids
        self.battle_log = battle_log
        self.shops = shops

        self.vk = VK()
        self.user: User = None
        self.tasks: List[Task] = []

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.api.__exit__(exc_type, exc_val, exc_tb)
        self.vk.__exit__(exc_type, exc_val, exc_tb)

    def start(self):
        user_item = self.db.get(where('key') == 'user')
        if user_item:
            self.user = User(user_item)
        else:
            self.user = self.api.get_user_info()
            self.db.insert({'key': 'user', **self.user.item})

        self.tasks = [
            # Re-registration task.
            Task(next_run_at=Task.at(hour=8, minute=0, tz=self.user.tz), execute=self.register),

            # Stamina quests depend on player's time zone.
            Task(next_run_at=Task.at(hour=9, minute=30, tz=self.user.tz), execute=self.farm_quests),
            Task(next_run_at=Task.at(hour=14, minute=30, tz=self.user.tz), execute=self.farm_quests),
            Task(next_run_at=Task.at(hour=21, minute=30, tz=self.user.tz), execute=self.farm_quests),

            # Other quests are simultaneous for everyone. Day starts at 3:00 UTC.
            Task(next_run_at=Task.every_n_minutes(24 * 60 // 5, offset=timedelta(hours=-1)), execute=self.attack_arena),
            Task(next_run_at=Task.every_n_minutes(24 * 60 // 5, offset=timedelta(minutes=-30)), execute=self.attack_grand_arena),
            Task(next_run_at=Task.every_n_hours(6, offset=timedelta(minutes=15)), execute=self.farm_mail),
            Task(next_run_at=Task.every_n_hours(6, offset=timedelta(minutes=30)), execute=self.check_freebie),
            Task(next_run_at=Task.every_n_hours(8), execute=self.farm_expeditions),
            Task(next_run_at=Task.at(hour=8, minute=0), execute=self.farm_daily_bonus),
            Task(next_run_at=Task.at(hour=8, minute=30), execute=self.buy_chest),
            Task(next_run_at=Task.at(hour=9, minute=0), execute=self.send_daily_gift),
            Task(next_run_at=Task.at(hour=10, minute=0), execute=self.farm_zeppelin_gift),
            Task(next_run_at=Task.at(hour=6, minute=0), execute=self.skip_tower),

            # Debug tasks. Uncomment when needed.
            # Task(next_run_at=Task.every_n_minutes(1), execute=self.quack, args=('Quack 1!',)),
            # Task(next_run_at=Task.every_n_minutes(1), execute=self.quack, args=('Quack 2!',)),
            # Task(next_run_at=Task.at(hour=22, minute=14, tz=None), execute=self.quack, args=('Fixed time!',)),
            # Task(next_run_at=Task.at(hour=22, minute=40, tz=None), execute=self.shop, args=(['1'],)),
            # Task(next_run_at=Task.at(hour=22, minute=14, tz=None), execute=self.attack_grand_arena),
        ]
        for mission_id, number in self.raids:
            self.tasks.append(Task(next_run_at=Task.every_n_hours(24 / number), execute=self.raid_mission, args=(mission_id,)))
        if self.shops:
            self.tasks.extend([
                Task(next_run_at=Task.at(hour=11, minute=1), execute=self.shop, args=(['4', '5', '6', '9'],)),
                Task(next_run_at=Task.every_n_hours(8, offset=timedelta(minutes=1)), execute=self.shop, args=(['1'],)),
            ])
        if self.battle_log:
            self.tasks.append(Task(next_run_at=Task.every_n_hours(8), execute=self.get_arena_replays))

    def run(self):
        logger.info('ü§ñ Initialising task queue.')
        now = self.now()
        schedule = [task.next_run_at(now).astimezone() for task in self.tasks]

        logger.info('ü§ñ Running task queue.')
        while True:
            # Find the earliest task.
            run_at, index = min((run_at, index) for index, run_at in enumerate(schedule))
            task = self.tasks[index]
            logger.info(f'üí§ Next is {task} at {run_at:%H:%M:%S}.')
            # Sleep until the execution time.
            sleep_time = (run_at - self.now()).total_seconds()
            if sleep_time >= 0.0:
                sleep(sleep_time)
            # Execute the task.
            next_run_at = self.execute(task) or task.next_run_at(max(self.now(), run_at + timedelta(seconds=1)))
            next_run_at = next_run_at.astimezone()  # keeping them in the local time zone
            # Update its execution time.
            logger.info(f'üí§ Next run at {next_run_at:%H:%M:%S}.{os.linesep}')
            schedule[index] = next_run_at

    @staticmethod
    def now():
        return datetime.now().astimezone()

    def execute(self, task: Task) -> Optional[datetime]:
        self.api.last_responses.clear()
        try:
            next_run_at = task.execute(*task.args)
        except AlreadyError as e:
            logger.error(f'ü§î Already done: {e.description}.')
        except NotEnoughError as e:
            logger.error(f'ü§î Not enough: {e.description}.')
        except InvalidResponseError as e:
            logger.error('üò± API returned something bad:')
            logger.error(f'üò± {e}')
        except Exception as e:
            logger.critical('üò± Uncaught error.', exc_info=e)
            for result in self.api.last_responses:
                logger.critical(f'üí¨ API result: {result}')
        else:
            logger.info(f'‚úÖ Well done.')
            return next_run_at

    @staticmethod
    def get_hero_ids(heroes: Iterable[Hero]) -> List[HeroID]:
        return [hero.id for hero in heroes]

    # Actual tasks.
    # ------------------------------------------------------------------------------------------------------------------

    @staticmethod
    def quack(text: str = 'Quack!'):
        """
        –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞.
        """
        logger.info(f'ü¶Ü {text}')
        sleep(1.0)

    def register(self):
        """
        –ó–∞–Ω–æ–≤–æ –∑–∞—Ö–æ–¥–∏—Ç –≤ –∏–≥—Ä—É, —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ —Å–æ–±—ã—Ç–∏—è—Ö.
        """
        self.api.start(invalidate_session=True)
        self.api.register()

    def farm_daily_bonus(self):
        """
        –ó–∞–±–∏—Ä–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫.
        """
        logger.info('üí∞ Farming daily bonus‚Ä¶')
        log_reward(self.api.farm_daily_bonus())

    def farm_expeditions(self) -> Optional[datetime]:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É —Å —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π –≤ –¥–∏—Ä–∏–∂–∞–±–ª–µ.
        """
        now = self.now()

        logger.info('üí∞ Farming expeditions‚Ä¶')
        expeditions = self.api.list_expeditions()
        for expedition in expeditions:
            if expedition.is_started and expedition.end_time < now:
                log_reward(self.api.farm_expedition(expedition.id))

        return self.send_expedition()  # farm expeditions once finished

    def send_expedition(self) -> Optional[datetime]:
        logger.info('üëä Sending an expedition‚Ä¶')

        # Check started expeditions.
        expeditions = self.api.list_expeditions()
        for expedition in expeditions:
            if expedition.is_started:
                logger.info(f'‚úÖ Started expedition ends at {expedition.end_time}.')
                return expedition.end_time

        # Get all busy heroes.
        busy_hero_ids = set.union(*(set(expedition.hero_ids) for expedition in expeditions))
        logger.info(f'üëä Busy heroes: {busy_hero_ids}.')

        # Choose the most powerful available heroes.
        heroes = arena.naive_select_attackers(hero for hero in self.api.get_all_heroes() if hero.id not in busy_hero_ids)
        if not heroes:
            logger.info('‚úÖ No heroes available.')
            return None
        team_power = sum(hero.power for hero in heroes)

        # Find available expeditions.
        expeditions = [
            expedition
            for expedition in self.api.list_expeditions()
            if expedition.is_available and expedition.power <= team_power
        ]
        if not expeditions:
            logger.info('‚úÖ No expeditions available.')
            return None
        expedition = min(expeditions, key=attrgetter('duration'))  # choose the fastest expedition

        # Send the expedition.
        end_time, quests = self.api.send_expedition_heroes(expedition.id, self.get_hero_ids(heroes))
        logger.info(f'‚è∞ The expedition ends at {end_time}.')
        self.farm_quests(quests)
        return end_time

    def farm_quests(self, quests: Quests = None):
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∏–∑ –∑–∞–¥–∞–Ω–∏–π.
        """
        logger.info('üí∞ Farming quests‚Ä¶')
        if quests is None:
            quests = self.api.get_all_quests()
        for quest in quests:
            if not quest.is_reward_available:
                continue
            if self.no_experience and quest.reward.experience:
                logger.warning(f'üôà Ignoring {quest.reward.experience} experience reward for quest #{quest.id}.')
                continue
            log_reward(self.api.farm_quest(quest.id))

    def farm_mail(self):
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∏–∑ –ø–æ—á—Ç—ã.
        """
        logger.info('üì© Farming mail‚Ä¶')
        letters = self.api.get_all_mail()
        if not letters:
            return
        logger.info(f'üì© {len(letters)} letters.')
        log_rewards(self.api.farm_mail(int(letter.id) for letter in letters).values())

    def buy_chest(self):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å—É–Ω–¥—É–∫.
        """
        logger.info('üì¶ Buying chest‚Ä¶')
        log_rewards(self.api.buy_chest())

    def send_daily_gift(self):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Ä–¥–µ—á–∫–∏ –¥—Ä—É–∑—å—è–º.
        """
        logger.info('üéÅ Sending daily gift‚Ä¶')
        self.farm_quests(self.api.send_daily_gift(['15664420', '209336881', '386801200', '386796029']))  # FIXME

    def attack_arena(self):
        """
        –°–æ–≤–µ—Ä—à–∞–µ—Ç –±–æ–π –Ω–∞ –∞—Ä–µ–Ω–µ.
        """
        logger.info('üëä Attacking arena‚Ä¶')

        # Obtain our heroes.
        heroes = self.api.get_all_heroes()
        if len(heroes) < arena.TEAM_SIZE:
            logger.warning('üòê Not enough heroes.')
            return

        # Pick an enemy and select attackers.
        results = (
            arena.select_enemy(arena.filter_enemies(self.api.find_arena_enemies(), self.user.clan_id), heroes)
            for _ in range(self.MAX_ARENA_ENEMIES)
        )  # type: Iterable[Tuple[ArenaEnemy, List[Hero], float]]
        (enemy, attackers, probability), _ = arena.secretary_max(results, self.MAX_ARENA_ENEMIES, key=itemgetter(2))

        # Debugging.
        log_heroes('Attackers:', attackers)
        log_heroes('Defenders:', enemy.heroes)
        logger.info(f'üëä Enemy place: {enemy.place}.')
        logger.info(f'üëä Probability: {100.0 * probability:.1f}%.')

        # Attack!
        result, quests = self.api.attack_arena(enemy.user.id, self.get_hero_ids(attackers))

        # Collect results.
        log_arena_result(result)
        logger.info(f'üëä Current place: {result.arena_place}.')
        self.farm_quests(quests)

    def attack_grand_arena(self):
        """
        –°–æ–≤–µ—Ä—à–∞–µ—Ç –±–æ–π –Ω–∞ –≥—Ä–∞–Ω–¥ –∞—Ä–µ–Ω–µ.
        """
        logger.info('üëä Attacking grand arena‚Ä¶')

        # Obtain our heroes.
        heroes = self.api.get_all_heroes()
        if len(heroes) < arena.GRAND_SIZE:
            logger.warning('üòê Not enough heroes.')
            return

        # Pick an enemy and select attackers.
        results = (
            arena.select_grand_enemy(arena.filter_enemies(self.api.find_grand_enemies(), self.user.clan_id), heroes)
            for _ in range(self.MAX_GRAND_ARENA_ENEMIES)
        )  # type: Iterable[Tuple[GrandArenaEnemy, List[List[Hero]], float]]
        (enemy, attacker_teams, probability), _ = arena.secretary_max(results, self.MAX_GRAND_ARENA_ENEMIES, key=itemgetter(2))

        # Debugging.
        for i, (attackers, defenders) in enumerate(zip(attacker_teams, enemy.heroes), start=1):
            logger.info(f'üëä Battle #{i}.')
            log_heroes('Attackers:', attackers)
            log_heroes('Defenders:', defenders)
        logger.info(f'üëä Enemy place: {enemy.place}.')
        logger.info(f'üëä Probability: {100.0 * probability:.1f}%.')

        # Attack!
        result, quests = self.api.attack_grand(enemy.user.id, [
            [attacker.id for attacker in attackers]
            for attackers in attacker_teams
        ])

        # Collect results.
        log_arena_result(result)
        logger.info(f'üëä Current place: {result.grand_place}.')
        self.farm_quests(quests)
        log_reward(self.api.farm_grand_coins())

    def get_arena_replays(self):
        """
        –ß–∏—Ç–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∂—É—Ä–Ω–∞–ª—ã –∞—Ä–µ–Ω.
        """
        logger.info('üìí Reading arena logs‚Ä¶')
        replays: List[Replay] = [
            *self.api.get_battle_by_type(BattleType.ARENA),
            *self.api.get_battle_by_type(BattleType.GRAND),
        ]
        for replay in replays:
            if self.db.table('replays').get(where('id') == replay.id):
                continue
            print(json.dumps({
                'replay_id': replay.id,
                'win': replay.win,
                'attackers': [hero.dump() for hero in replay.attackers],
                'defenders': [hero.dump() for defenders in replay.defenders for hero in defenders],
            }), file=self.battle_log, flush=True)
            self.db.table('replays').insert({'id': replay.id})
            logger.info(f'üìí Saved #{replay.id}.')

    def check_freebie(self):
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–≥—Ä—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
        """
        logger.info('üéÅ Checking freebie‚Ä¶')
        should_farm_mail = False

        for gift_id in self.vk.find_gifts():
            if self.db.table('gifts').get(where('id') == gift_id):
                continue
            logger.info(f'üéÅ Checking #{gift_id}‚Ä¶')
            if self.api.check_freebie(gift_id) is not None:
                logger.info(f'üéâ Received #{gift_id}!')
                should_farm_mail = True
            self.db.table('gifts').insert({'id': gift_id})

        if should_farm_mail:
            self.farm_mail()

    def farm_zeppelin_gift(self):
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –∫–ª—é—á —É –≤–∞–ª—å–∫–∏—Ä–∏–∏ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–Ω—ã–µ —Å—É–Ω–¥—É–∫–∏.
        """
        logger.info('üéÅ Farming zeppelin gift‚Ä¶')
        log_reward(self.api.farm_zeppelin_gift())
        for _ in range(self.MAX_OPEN_ARTIFACT_CHESTS):
            try:
                log_rewards(self.api.open_artifact_chest())
            except NotEnoughError:
                logger.info('üí¨ All keys are spent.')
                break
        else:
            logger.info('üí¨ All chests have been opened.')

    def raid_mission(self, mission_id: str):
        """
        –•–æ–¥–∏—Ç –≤ —Ä–µ–π–¥ –≤ –º–∏—Å—Å–∏—é –≤ –∫–∞–º–ø–∞–Ω–∏–∏ –∑–∞ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏.
        """
        logger.info(f'üëä Raid mission ¬´{mission_name(mission_id)}¬ª‚Ä¶')
        log_rewards(self.api.raid_mission(mission_id))

    def shop(self, shop_ids: List[ShopID]):
        """
        –ü–æ–∫—É–ø–∞–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ –≤–µ—â–∏.
        """
        logger.info(f'üõí Refreshing shops {shop_ids}‚Ä¶')
        available_slots: Set[Tuple[ShopID, SlotID]] = {
            (shop_id, slot.id)
            for shop_id in shop_ids
            for slot in self.api.get_shop(shop_id)
            if not slot.is_bought
        }

        logger.info('üõí Buying stuff‚Ä¶')
        for shop_id, slot_id in self.shops:
            if shop_id not in shop_ids:
                logger.debug(f'üõí Ignoring shop ¬´{shop_name(shop_id)}¬ª.')
                continue
            if (shop_id, slot_id) not in available_slots:
                logger.warning(f'üõí Slot #{slot_id} is not available in shop ¬´{shop_name(shop_id)}¬ª.')
                continue
            logger.info(f'üõí Buying slot #{slot_id} in shop ¬´{shop_name(shop_id)}¬ª‚Ä¶')
            try:
                log_reward(self.api.shop(shop_id=shop_id, slot_id=slot_id))
            except (NotEnoughError, AlreadyError) as e:
                logger.warning(f'üõí {e.description}')

    def skip_tower(self):
        """
        –ó–∞—á–∏—Å—Ç–∫–∞ –±–∞—à–Ω–∏.
        """
        logger.info('üóº Skipping the tower‚Ä¶')
        tower = self.api.get_tower_info()

        while tower.floor_number <= tower.may_skip_floor or not tower.is_battle:
            logger.info(f'üóº Floor #{tower.floor_number}: {tower.floor_type}.')
            if tower.is_battle:
                tower, reward = self.api.skip_tower_floor()
                log_reward(reward)
            elif tower.is_chest:
                reward, _ = self.api.open_tower_chest(choice([0, 1, 2]))
                log_reward(reward)
                tower = self.api.next_tower_floor()
            elif tower.is_buff:
                # Buffs go from the cheapest to the most expensive.
                for buff_id in reversed(tower.buff_ids):
                    if buff_id not in self.IGNORED_BUFF_IDS:
                        try:
                            self.api.buy_tower_buff(buff_id)
                        except NotEnoughError:
                            logger.info(f'üóº Not enough resources for buff #{buff_id}.')
                        except AlreadyError:
                            logger.info(f'üóº Already bought buff #{buff_id}.')
                        except NotFoundError as e:
                            logger.warning(f'üóº Not found for buff #{buff_id}: {e.description}.')
                    else:
                        logger.debug(f'üóº Skip buff #{buff_id}.')
                tower = self.api.next_tower_floor()
            else:
                logger.error('üóº Unknown floor type.')

    '''
    def attack_boss(self):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–æ–π –≤ –ó–∞–ø—Ä–µ–¥–µ–ª—å–µ.
        """
        logger.info('üëä Attacking a boss‚Ä¶')

        # Get current boss.
        boss, *_ = self.api.get_current_boss()
        logger.info('üëä Boss %s.', boss.id)

        # Find appropriate heroes.
        heroes = sorted([
            hero
            for hero in self.api.get_all_heroes()
            if hero.id in API.RECOMMENDED_HEROES[boss.id]
        ], key=self.get_power, reverse=True)[:5]
        if not heroes:
            logger.warning('üòû No appropriate heroes.')
            return

        # Attack boss.
        hero_ids = self.get_hero_ids(heroes)
        battle = self.api.attack_boss(boss.id, hero_ids)
        logger.warning('üëä Seed %s.', battle.seed)
        self.api.sleep(20.0)
        quests = self.api.end_boss_battle(battle.seed, hero_ids)

        # Farm rewards.
        self.farm_quests(quests)
        reward, quests = self.api.open_boss_chest(boss.id)
        self.print_reward(reward)
        self.farm_quests(quests)
    '''
